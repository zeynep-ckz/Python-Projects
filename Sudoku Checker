from cmu_cpcs_utils import testFunction, rounded
import copy

def isLegalSudoku(grid):
    rows, cols = len(grid), len(grid[0])
    if rows != cols: return False
    if rows != 4 and rows != 9: return False
    if not legR(grid): return False
    if not legC(grid): return False
    if not legBlock(grid): return False
    return True

def legR(grid):
    for row in grid:
        if not legVal(row):
            return False
    return True

def legC(grid):
    rows, cols = len(grid), len(grid[0])
    for col in range(cols):
        colList = []
        for row in range(rows):
            colList.append(grid[row][col])
        if not legVal(colList):
            return False
    return True

def legBlock(grid):
    rows, cols = len(grid), len(grid[0])
    size = int(rows**0.5)
    for n in range(rows):
        startR = n // size * size
        startC = n % size * size
        bList = []
        for row in range(startR, startR + size):
            for col in range(startC, startC + size):
                bList.append(grid[row][col])
        if not legVal(bList):
            return False
    return True
    
def legVal(val):
    n = len(val)
    for v in val:
        if type(v) != int:
            return False
        if v < 0 or v > n:
            return False
        if v > 0 and val.count(v) > 1:
            return False
    return True 

@testFunction
def testIsLegalSudoku():
    
    okGrid1 = [
     [ 3, 0, 4, 0 ],
     [ 0, 1, 0, 2 ],
     [ 0, 4, 0, 3 ],
     [ 2, 0, 1, 0 ]
    ]
    badGrid1 = copy.deepcopy(okGrid1)
    badGrid1[3][3] = 1

    assert(isLegalSudoku(okGrid1) == True)
    assert(isLegalSudoku(badGrid1) == False)

    okGrid2 = [
     [ 3, 2, 4, 1 ],
     [ 4, 1, 3, 2 ],
     [ 1, 4, 2, 3 ],
     [ 2, 3, 1, 4 ]
    ]
    badGrid2 = copy.deepcopy(okGrid2)
    badGrid2[2][2] = 4

    assert(isLegalSudoku(okGrid2) == True)
    assert(isLegalSudoku(badGrid2) == False)

    badGrid3 = [
     [ 1, 2, 3, 4 ],
     [ 2, 3, 4, 1 ],
     [ 3, 4, 1, 2 ],
     [ 4, 1, 2, 3 ]
    ]
    assert(isLegalSudoku(badGrid3) == False)

    #  not 4x4 or 9x9
    badGrid4 = [
     [ 3, 0, 4, 0 ],
     [ 0, 1, 0, 2 ],
     [ 0, 4, 0, 3 ]
    ]
    
    assert(isLegalSudoku(badGrid4) == False)
    
    #  contains an integer that is out of range (5)
    badGrid5 = [
     [ 3, 0, 5, 4 ],
     [ 3, 4, 1, 2 ],
     [ 2, 1, 4, 3 ],
     [ 4, 3, 2, 0 ]
    ]
    
    assert(isLegalSudoku(badGrid5) == False)

    #  contains a non-integer
    badGrid6 = [
     [ 3, 0, 4, 0 ],
     [ 0, 1, 0, 2 ],
     [ 0, 4, 0, 3 ],
     [ 2, 0, 1, 'do not crash!' ]
    ]
    
    assert(isLegalSudoku(badGrid6) == False)

    #  now test 9x9 boards
    okGrid3 = [
     [ 5, 3, 0, 0, 7, 0, 0, 0, 0 ],
     [ 6, 0, 0, 1, 9, 5, 0, 0, 0 ],
     [ 0, 9, 8, 0, 0, 0, 0, 6, 0 ],
     [ 8, 0, 0, 0, 6, 0, 0, 0, 3 ],
     [ 4, 0, 0, 8, 0, 3, 0, 0, 1 ],
     [ 7, 0, 0, 0, 2, 0, 0, 0, 6 ],
     [ 0, 6, 0, 0, 0, 0, 2, 8, 0 ],
     [ 0, 0, 0, 4, 1, 9, 0, 0, 5 ],
     [ 0, 0, 0, 0, 8, 0, 0, 7, 9 ]
    ]
    badGrid7 = copy.deepcopy(okGrid3)
    badGrid7[0][0] = 7
    
    assert(isLegalSudoku(okGrid3) == True)
    assert(isLegalSudoku(badGrid7) == False)

def main():
    testIsLegalSudoku()

main()
